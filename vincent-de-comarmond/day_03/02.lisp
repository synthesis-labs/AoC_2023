(defun char-list-2-int (char-list)
  (parse-integer (coerce char-list 'string)))

(defun cons-add (a b)
  (cons (+ (car a) (car b)) (+ (cdr a) (cdr b))))

(defun construct-square ()
  (loop for i from -1 to 1 nconcing (loop for j from -1 to 1 collect (cons i j))))

(defun get-seeds (point number-map)
  (let* ((seeds '())
	 (region (mapcar (lambda (x) (cons-add x point)) (construct-square)))
	 (values (mapcar (lambda (x) (gethash x number-map)) region)))
    (if (nth 3 values) (push (nth 3 region) seeds))
    (if (nth 5 values) (push (nth 5 region) seeds))
    (cond ((nth 1 values)
	   (push (nth 1 region) seeds))
	  ((and (nth 0 values) (nth 2 values))
	   (push (nth 0 region) seeds)
	   (push (nth 2 region) seeds))
	  ((nth 0 values) (push (nth 0 region) seeds))
	  ((nth 2 values) (push (nth 2 region) seeds)))
    (cond ((nth 7 values) (push (nth 7 region) seeds))
	  ((and (nth 6 values) (nth 8 values))
	   (push (nth 6 region) seeds)
	   (push (nth 8 region) seeds))
	  ((nth 6 values) (push (nth 6 region) seeds))
	  ((nth 8 values) (push (nth 8 region) seeds)))
    seeds))

(defun make-number (seed number-map)
  (let ((l2 (gethash (cons-add seed '(0 . -2)) number-map))
	(l1 (gethash (cons-add seed '(0 . -1)) number-map))
	(c (gethash seed number-map))
	(r1 (gethash (cons-add seed '(0 . 1)) number-map))
	(r2 (gethash (cons-add seed '(0 . 2)) number-map)))

    (cond ((and l2 l1) (char-list-2-int (list l2 l1 c)))
	  ((and r1 r2) (char-list-2-int (list c r1 r2)))
	  ((and l1 r1) (char-list-2-int (list l1 c r1)))
	  (l1 (char-list-2-int (list l1 c)))
	  (r1 (char-list-2-int (list c r1)))
	  (t (digit-char-p c)))))

(let ((file-in "./input.txt")
      (row 0)
      (col 0)
      (total 0)
      (symbols '())
      (number-map (make-hash-table :test 'equal)))

  (with-open-file (stream file-in)
    (loop for char = (read-char stream 'nil) while char do
      (incf col)
      (cond ((digit-char-p char)
	     (setf (gethash (cons row col) number-map) char))
	    ((eql #\Newline char)
	     (incf row)
	     (setf col -1))
	    ((eql #\* char)
	     (push (cons row col) symbols)))))
  
  (loop for symb in symbols do
    (let ((seeds (get-seeds symb number-map)))
      (if (= 2 (length seeds))
	  (let ((alpha (make-number (first seeds) number-map))
		(beta (make-number (second seeds) number-map)))
	    (setf total (+ total (* alpha beta)))))))
  (print total))

