(defun read-input-map (input-fp)
  (let ((mouse-map (make-hash-table :test 'equal))
	(i 0)
	(j -1))
    (with-open-file (stream input-fp)
      (loop for ch = (read-char stream 'nil) while ch do
	(if (eql ch #\Newline)
	    (progn
	      (setf j -1)
	      (incf i))
	    (progn
	      (incf j)
	      (if (not (eql ch #\.))
		  (progn
		    (setf (gethash (cons i j) mouse-map) ch)
		    (if (eql ch #\S)
			(setf (gethash #\S mouse-map) (cons i j)))))))))
    mouse-map))


(defun cons+ (a b)
  (cons (+ (car a) (car b)) (+ (cdr a) (cdr b))))


(defun get-neighbours (pos map)
  (let ((val (gethash pos map))
	(output '())
	(n (cons+ pos '(-1 . 0)))
	(e (cons+ pos '(0 . 1)))
	(s (cons+ pos '(1 . 0)))
	(w (cons+ pos '(0 . -1))))
    (cond ((eql #\| val)
	   (if (find (gethash n map) "|F7S")
	       (push n output))
	   (if (find (gethash s map) "|JLS")
	       (push s output)))
	  ((eql #\F val)
	   (if (find (gethash e map) "-J7S")
	       (push e output))
	   (if (find (gethash s map) "|JLS")
	       (push s output)))
	  ((eql #\- val)
	   (if (find (gethash e map) "-J7S")
	       (push e output))
	   (if (find (gethash w map) "-LFS")
	       (push w output)))
	  ((eql #\7 val)
	   (if (find (gethash w map) "-LFS")
	       (push w output))
	   (if (find (gethash s map) "|JLS")
	       (push s output)))
	  ((eql #\J val)
	   (if (find (gethash n map) "|F7S")
	       (push n output))
	   (if (find (gethash w map) "-LFS")
	       (push w output)))
	  ((eql #\L val)
	   (if (find (gethash n map) "|F7S")
	       (push n output))
	   (if (find (gethash e map) "-J7S")
	       (push e output)))
	  (t
	   (if (find (gethash n map) "|F7S")
	       (push n output))
	   (if (find (gethash e map) "-J7S")
	       (push e output))
	   (if (find (gethash s map) "|JLS")
	       (push s output))
	   (if (find (gethash w map) "-LFS")
	       (push w output))))
    (if (= 2 (length output))
	output
	(error "Incorrect number of inputs"))))


(defun walk-map (input-hash-tab &optional (output '()))
  (if (= 0 (length output))
      (walk-map input-hash-tab (push (gethash #\S input-hash-tab) output))

      (let* ((curr (car output))
	     (prev (cadr output))
	     (neighbours (get-neighbours curr input-hash-tab)))
	(setf neighbours (remove prev neighbours :test 'equal))

	(if (and (equal curr (gethash #\S input-hash-tab)) (> (length output) 1))
	    (/ (1- (length output)) 2)
	    (walk-map input-hash-tab (push (car neighbours) output))))))

(format t "Distance: ~s~%" (walk-map (read-input-map "./input.txt")))
;; 7086 is the right answer for part 1
