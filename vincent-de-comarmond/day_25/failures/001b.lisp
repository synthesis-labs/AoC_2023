(defun random-edge (graph)
  (let* ((edges (mapcar #'car graph))
         (random-index (random (length edges))))
    (nth random-index edges)))

(defun contract (graph edge)
  (let* ((u (car edge))
         (v (cdr edge))
         (new-edges (remove-if (lambda (e) (or (equal e edge)
                                               (equal (cons v u) e)
                                               (equal (cons u v) e)))
                               (mapcar (lambda (e)
                                         (if (equal (cdr e) v)
                                             (cons (car e) u)
                                             e))
                                       graph))))
    (remove-if (lambda (e) (equal (car e) (cdr e))) new-edges)))

(defun karger-min-cut (graph)
  (let ((min-cut (length graph)))
    (loop for i from 0 below (length graph)
          do (let ((g (copy-list graph)))
               (loop while (> (length (remove-duplicates (mapcar #'car g))) 2)
                     do (setf g (contract g (random-edge g))))
               (setf min-cut (min min-cut (length g)))))
    min-cut))

;; Example usage:
(let ((graph '((1 . 2) (1 . 3) (2 . 3) (2 . 4) (3 . 4))))
  (format t "Minimum cut: ~a~%" (karger-min-cut graph)))
